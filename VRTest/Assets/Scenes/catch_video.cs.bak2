using System;
using System.Collections.Concurrent;
using System.IO;
using System.Net;
using System.Threading;
using UnityEngine;

public class MjpegToRenderTexture : MonoBehaviour
{
    [Header("MJPEG Stream URL")]
    public string streamUrl = "http://localhost:5000/raw";

    [Header("出力先 RenderTexture")]
    public RenderTexture targetRenderTexture;

    [Header("（任意）マテリアルに直接セットしたい場合")]
    public Renderer targetRenderer;
    public string texturePropertyName = "_MainTex";

    private ConcurrentQueue<byte[]> _pngQueue = new ConcurrentQueue<byte[]>();
    private Thread _workerThread;
    private volatile bool _running;

    void Start()
    {
        if (targetRenderTexture == null)
        {
            Debug.LogError("[PngStreamToRenderTexture] targetRenderTexture をアサインしてください");
            enabled = false;
            return;
        }

        if (targetRenderer != null)
            targetRenderer.material.SetTexture(texturePropertyName, targetRenderTexture);

        _running = true;
        _workerThread = new Thread(StreamLoop) { IsBackground = true };
        _workerThread.Start();
    }

    private void StreamLoop()
    {
        while (_running)
        {
            try
            {
                var req = (HttpWebRequest)WebRequest.Create(streamUrl);
                req.Timeout = 5000;
                req.ReadWriteTimeout = 5000;

                using (var resp = (HttpWebResponse)req.GetResponse())
                using (var stream = resp.GetResponseStream())
                using (var ms = new MemoryStream())
                {
                    stream.CopyTo(ms);
                    _pngQueue.Enqueue(ms.ToArray());
                }
            }
            catch (Exception ex)
            {
                Debug.LogWarning($"[PngStreamToRenderTexture] Stream error: {ex.Message} → 1秒後に再試行します");
            }

            // 次のフレームを取得するまで少し待つ（例：30FPSなら約33ms）
            Thread.Sleep(33);
        }
    }

    void Update()
    {
        // 古いフレームをスキップして最新のみ表示
        while (_pngQueue.Count > 1)
            _pngQueue.TryDequeue(out _);

        if (_pngQueue.TryDequeue(out var pngBytes))
        {
            var tex = new Texture2D(2, 2, TextureFormat.RGBA32, false);
            tex.LoadImage(pngBytes);
            Graphics.Blit(tex, targetRenderTexture);
            Destroy(tex);
        }
    }

    void OnDestroy()
    {
        _running = false;
        if (_workerThread != null && _workerThread.IsAlive)
            _workerThread.Join();
    }
}